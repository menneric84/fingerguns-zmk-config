#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_move.dtsi>
#include <behaviors/mouse_scroll.dtsi>

//////////////////////////////////////////////////////////////////////
// NOTE: Use the `#define` settings below to customize this keymap! //
// You can override them here instead of modifying them down there. //
// /* EXAMPLE: */  #define EMOJI_HAIR_STYLE_PRESET 3 // curly_hair  //
//////////////////////////////////////////////////////////////////////
//
// Sunaku's Keymap v30 -- "Glorious Engrammer"
// - https://github.com/sunaku/glove80-keymaps
//
//////////////////////////////////////////////////////////////////////

/ {
        behaviors {

                //////////////////////////////////////////////////////////////////////////
                //
                // Miryoku layers and home row mods (ported from my QMK endgame)
                // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
                // - https://github.com/urob/zmk-config#timeless-homerow-mods
                //
                //////////////////////////////////////////////////////////////////////////

                //
                // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
                // for the pinky, ring, and middle fingers (which are assigned to Super,
                // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
                //
                #ifndef HOMEY_HOLDING_TYPE
                #define HOMEY_HOLDING_TYPE "tap-preferred"
                #endif

                //
                // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
                // home row mod keys in order to send their modifiers to the computer
                // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
                //
                #ifndef HOMEY_HOLDING_TIME
                #define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
                #endif

                //
                // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
                // after typing before you can use home row mods again.  It prevents
                // unintended activation of home row mods when you're actively typing.
                //
                #ifndef HOMEY_STREAK_DECAY
                #define HOMEY_STREAK_DECAY 170 // global-quick-tap-ms
                #endif

                //
                // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
                // after tapping a key to hold it again in order to make it auto-repeat.
                //
                #ifndef HOMEY_REPEAT_DECAY
                #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
                #endif

                //
                // SHIFT_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
                // for index fingers (which Miryoku assigns to Shift) on home row keys.
                //
                // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
                // allows faster activation of the Shift modifier (without having to wait
                // for the modified key to be released as the "balanced" flavor requires).
                // Typing streaks and the `hold-trigger-on-release` setting are disabled
                // for the index fingers so as not to hinder their speed and dexterity.
                //
                #ifndef SHIFT_HOLDING_TYPE
                #define SHIFT_HOLDING_TYPE "tap-preferred"
                #endif

                //
                // SHIFT_HOLDING_TIME defines how long you need to hold (milliseconds)
                // index finger keys in order to send their modifiers to the computer
                // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
                //
                // CAUTION: You'll need to perform inward rolls from pinky->ring->middle
                // fingers toward the index fingers when activating multiple modifiers
                // because `hold-trigger-on-release` is disabled for the index fingers.
                // Otherwise, you may be surprised that the index fingers' modifier is
                // sent immediately without the rest of your multi-mod chord when you
                // perform outward rolls from your index fingers toward your pinkies.
                //
                #ifndef SHIFT_HOLDING_TIME
                #define SHIFT_HOLDING_TIME 170
                #endif

                //
                // SHIFT_STREAK_DECAY defines how long you need to wait (milliseconds)
                // after typing before you can use home row mods again.  It prevents
                // unintended activation of home row mods when you're actively typing.
                //
                #ifndef SHIFT_STREAK_DECAY
                #define SHIFT_STREAK_DECAY 70 // global-quick-tap-ms
                #endif

                //
                // SHIFT_REPEAT_DECAY defines how much time you have left (milliseconds)
                // after tapping a key to hold it again in order to make it auto-repeat.
                //
                #ifndef SHIFT_REPEAT_DECAY
                #define SHIFT_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
                #endif

                //
                // THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
                // for the thumbs (which are assigned to 6 layers in the Miryoku system).
                //
                // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
                // activation for the symbol layer (if the tapped symbol key is released
                // while the thumb layer key is still held down) for quicker programming.
                //
                #ifndef THUMB_HOLDING_TYPE
                #define THUMB_HOLDING_TYPE "balanced"
                #endif

                //
                // THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
                // a thumb key to activate a layer.  Shorter holds are treated as taps.
                //
                #ifndef THUMB_HOLDING_TIME
                #define THUMB_HOLDING_TIME 200
                #endif

                //
                // THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
                // after tapping a key to hold it again in order to make it auto-repeat.
                //
                #ifndef THUMB_REPEAT_DECAY
                #define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
                #endif

                //
                // SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
                // the space thumb key to activate.  Shorter holds are treated as taps.
                //
                #ifndef SPACE_HOLDING_TIME
                #define SPACE_HOLDING_TIME 170
                #endif

                //
                // SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
                // after tapping a key to hold it again in order to make it auto-repeat.
                //
                #ifndef SPACE_REPEAT_DECAY
                #define SPACE_REPEAT_DECAY 200 // "tap then hold" for key auto-repeat
                #endif

                //
                // Corne key positions index for positional hold-tap
                // - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
                // - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
                //
                // |------------------------|------------------------|
                // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
                // |                        |                        |
                // |  0  1  2  3  4  5      |      6  7  8  9  10 11 |
                // | 12 13 14 15 16 17      |      18 19 20 21 22 23 |
                // | 24 25 26 27 28 29      |      30 31 32 33 34 35 |
                // |          36 37 38      |      39 40 41          |
                // |------------------------|------------------------|
                //
                #define LEFT_HAND_KEYS         \
                         0  1  2  3  4  5      \
                        12 13 14 15 16 17      \
                        24 25 26 27 28 29      \
                #define RIGHT_HAND_KEYS        \
                                         6  7  8  9 10 11 \
                                        18 19 20 21 22 23 \
                                        30 31 32 33 34 35 \
                #define THUMB_KEYS          \
                                36 37 38    39 40 41             \

                //
                // Home row mod-tap keys for all except index fingers
                //
                hml: corne_home_row_mods_left_hand {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOME_ROW_MODS_LEFT_HAND";
                        flavor = HOMEY_HOLDING_TYPE;
                        hold-trigger-key-positions = <6  7  8  9 10 11
                                                     18 19 20 21 22 23
                                                     30 31 32 33 34 35
                                                     36 37 38 39 40 41>;
                        hold-trigger-on-release; // wait for other home row mods
                        tapping-term-ms = <HOMEY_HOLDING_TIME>;
                        quick-tap-ms = <HOMEY_REPEAT_DECAY>;
                        require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;
                };
                 hmr: corne_home_row_mods_right_hand {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOME_ROW_MODS_RIGHT_HAND";
                        flavor = HOMEY_HOLDING_TYPE;
                        hold-trigger-key-positions = <0  1  2  3  4  5
                                                     12 13 14 15 16 17
                                                     24 25 26 27 28 29
                                                     36 37 38 39 40 41>;
                        hold-trigger-on-release; // wait for other home row mods
                        tapping-term-ms = <HOMEY_HOLDING_TIME>;
                        quick-tap-ms = <HOMEY_REPEAT_DECAY>;
                        require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;
                 };

                //
                // Special home row mod-tap keys for the index fingers
                //
                shl: corne_home_row_mods_left_shift_shift {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOME_ROW_MODS_LEFT_SHIFT_SHIFT";
                        flavor = SHIFT_HOLDING_TYPE;
                        hold-trigger-key-positions = <6  7  8  9 10 11
                                                     18 19 20 21 22 23
                                                     30 31 32 33 34 35
                                                     36 37 38 39 40 41>;
                        //hold-trigger-on-release; // don't wait for other mods
                        tapping-term-ms = <SHIFT_HOLDING_TIME>;
                        quick-tap-ms = <SHIFT_REPEAT_DECAY>;
                        require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;
                };
                shr: corne_home_row_mods_right_shift_shift {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOME_ROW_MODS_RIGHT_SHIFT_SHIFT";
                        flavor = SHIFT_HOLDING_TYPE;
                        hold-trigger-key-positions = <0  1  2  3  4  5
                                                     12 13 14 15 16 17
                                                     24 25 26 27 28 29
                                                     36 37 38 39 40 41>;
                        //hold-trigger-on-release; // don't wait for other mods
                        tapping-term-ms = <SHIFT_HOLDING_TIME>;
                        quick-tap-ms = <SHIFT_REPEAT_DECAY>;
                        require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;
                };
        };

        macros {
                ctrl_shft_esc: ctrl_shft_esc {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LSHFT>
                                , <&macro_tap &kp ESC>
                                , <&macro_release &kp LCTRL &kp LSHFT>
                                ;
                        };
                };

        combos {
                compatible = "zmk,combos";
                combo_tab {
                        timeout-ms = <50>;
                        key-positions = <1 2>;
                        bindings = <&kp TAB>;
                        layers = <0 1 2 3>;
                };
                combo_bspc {
                        timeout-ms = <50>;
                        key-positions = <9 10>;
                        bindings = <&kp BSPC>;
                        layers = <0 1 2 3>;
                };
                combo_sqt {
                        timeout-ms = <50>;
                        key-positions = <21 22>;
                        bindings = <&kp SQT>;
                        layers = <0>;
                };
                combo_star {
                        timeout-ms = <50>;
                        key-positions = <21 22>;
                        bindings = <&kp STAR>;
                        layers = <1>;
                };
                combo_esc {
                        timeout-ms = <50>;
                        key-positions = <33 34>;
                        bindings = <&kp ESC>;
                        layers = <0 3>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | L-0 | ENT |   | SPC | L-1  | ALT |
                        label = "Base";
                        bindings = <
   &kp TAB    &kp Q       &kp W        &kp E         &kp R          &kp T    &kp Y      &kp U          &kp I         &kp O        &kp P          &kp BSPC
   &kp LCTRL  &hml LGUI A &hml LALT S  &hml LCTRL D  &shl LSHIFT F  &kp G    &kp H      &shr RSHIFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI &kp SQT
   &kp LSHFT  &kp Z       &kp X        &kp C         &kp V          &kp B    &kp N      &kp M          &kp COMMA     &kp DOT      &kp FSLH       &kp ESC
                                       &kp LGUI      &to 0          &kp RET  &kp SPACE  &to 1          &kp RALT
                        >;
                };

                nums_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |     |     |     |     |     |   |  -  |  7  |  8  |  9  |  /  |     |
// | CTRL |     |     |     |     |     |   |  =  |  4  |  5  |  6  |  +  |  *  |
// | SHFT |     |     |     |     |     |   |  0  |  1  |  2  |  3  | L-2 |     |
//                    | GUI | L-0 | ENT |   | SPC | L-3 | ALT |
                        label = "Nums";
                        bindings = <
   &kp TAB   &trans &trans &trans   &trans &trans   &kp MINUS &kp N7 &kp N8   &kp N9 &kp FSLH &trans
   &kp LCTRL &trans &trans &trans   &trans &trans   &kp EQUAL &kp N4 &kp N5   &kp N6 &kp PLUS &kp STAR
   &kp LSHFT &trans &trans &trans   &trans &trans   &kp N0    &kp N1 &kp N2   &kp N3 &to 2    &trans
                           &kp LGUI &to 0  &kp RET  &kp SPACE &to 3  &kp RALT
                        >;
                };

                syms_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |     |
// | CTRL |     |     |     |     | L-5 |   |  =  |  -  |  [  |  ]  | "|" |  `  |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  |  \  |  ~  |
//                    | GUI | L-0 | ENT |   | SPC | L-1 | ALT |
                        label = "Symbols";
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp STAR &kp LPAR &kp RPAR &trans
   &kp LCTRL &trans   &trans &trans   &trans   &to 5       &kp EQUAL &kp MINUS &kp LBKT &kp RBKT &kp PIPE &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC &kp RBRC &kp BSLH &kp TILDE
                    	     &kp LGUI &to 0    &kp RET     &kp SPACE &to 1     &kp RALT
                        >;
                };

                sys_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |     | SCRL |  MSU | SCRR |     |   | MUTE | VOLD | VOLU |     |     |     |
// | CTRL |     |  MSL |  MSD | MSR  | DEL |   |  LFT |  DWN |   UP | RGT |     |     |
// | SHFT |     |      | SCRU | SCRD |     |   |      | LCLK | RCLK |     | L-4 |     |
//                     |  GUI |  L-0 | ENT |   |  SPC |  L-1 |  ALT |
                        label = "System";
                        bindings = <
   &kp TAB   &trans &msc SCRL_LEFT &mmv MOVE_UP   &msc SCRL_RIGHT &trans        &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &trans    &trans &trans
   &kp LCTRL &trans &mmv MOVE_LEFT   &mmv MOVE_DOWN &mmv MOVE_RIGHT   &kp DEL   &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT &trans &trans 
   &kp LSHFT &trans &trans           &msc SCRL_UP   &msc SCRL_DOWN    &trans    &trans     &mkp LCLK    &mkp RCLK    &trans    &to 4  &trans 
                                     &kp LGUI       &to 0             &kp RET   &kp SPACE  &to 1        &kp RALT 
                        >;
                };

                bt_layer{
// -----------------------------------------------------------------------------------------
// | CTRL-SHFT-ESC |     |     |     |     |     |   |     |     |     |     |     |      |
// | BTCLR         | BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |     |     |     |      |
// |               |     |     |     |     |     |   |     |     |     |     |     |      |
//                             | GUI | L-0 | ENT |   | SPC | L-1 | ALT |
                        label = "BT";
                        bindings = <
   &ctrl_shft_esc &trans       &trans       &trans       &trans       &trans         &trans    &trans &trans   &trans &trans &trans
   &bt BT_CLR     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans    &trans &trans   &trans &trans &trans
   &trans         &trans       &trans       &trans       &trans       &trans         &trans    &trans &trans   &trans &trans &trans
                                            &kp LGUI     &to 0        &kp RET        &kp SPACE &to 1  &kp RALT 
                        >;
                };

                gaming_layer{
// -----------------------------------------------------------------------------------------
//       ESC
// |  TAB |  Q  |  W  |  E  |  R  |   |     |     |     |     |     |
// | SHFT |  A  |  S  |  D  |  F  |   |     |     |     |     |     |
// | CTRL |  Z  |  X  |  C  |  V  |   |     |     |     |     |     |
//              |     |     | SPC |   | SPC | L-1 |     |
                        label = "Gaming";
                        bindings = <
   &none &kp TAB   &kp Q &kp W &kp E &kp R     &none      &none &none &none &none &none
   &none &kp LSHFT &kp A &kp S &kp D &kp F     &none      &none &none &none &none &none
   &none &kp LCTRL &kp Z &kp X &kp C &kp V     &none      &none &none &none &none &none
                         &none &none &kp SPACE &kp SPACE  &to 1 &none
                        >;
                };
        };
};